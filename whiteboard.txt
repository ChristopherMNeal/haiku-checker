Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

function fibNumber(num){
  let sum = [1, 2];
for (let i = 0; i < num - 2; i++){
  sum.push(sum[i] + sum[i+1])
  }
  console.log(sum);
  return sumOfArray(sum);
}

function sumOfArray(array){
  let sum = 0;
  for(let i = 0; i <array.length; i++){
    if (array[i] % 2 === 0){
      sum += array[i];
    }
  }      
  return sum;
}

const fibNumber = (num, end, a, b) => {
  if (num >= end) {
    return 0;
  } else if (num % 2 === 0) {
    return num + fibNumber(a + b, end, b, a + b);
  } else {
    return fibNumber(a + b, end, b, a + b);
  }
}


const subtractOne = (x) => {
  const sumMultiples = (n) => {
    if (n <= 0) {
      return n;
    } else if (n % 3 === 0 || n % 5 === 0) {
      return n + sumMultiples(n - 1);
    } else {
      return sumMultiples(n - 1);
    }
  };
  return sumMultiples(x - 1);
};

console.log(subtractOne(1000)); // returns 233168
